
Use GPU: 0 for training
==> training...
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
Epoch: [1][0/378]	GPU 0	Time: 8.896	Loss 0.6251	Acc@1 71.875	Acc@5 100.000	Precision 0.000	Recall 0.000	Macro_f1 0.000	Micro_f1 0.000	
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
here1 torch.Size([64, 464, 16, 16])
here2 torch.Size([64, 1024, 16, 16])
here3 torch.Size([64, 1024, 1, 1])
Error in sys.excepthook:
Traceback (most recent call last):
  File "/usr/lib/python3.7/linecache.py", line 74, in checkcache
    stat = os.stat(fullname)
KeyboardInterrupt
Original exception was:
Traceback (most recent call last):
  File "train_teacher.py", line 320, in <module>
    main()
  File "train_teacher.py", line 117, in main
    main_worker(None if ngpus_per_node > 1 else opt.gpu_id, ngpus_per_node, opt)
  File "train_teacher.py", line 211, in main_worker
    train_acc, train_acc_top5, train_loss, precision, recall, macro_f1, micro_f1 = train(epoch, train_loader, model, criterion, optimizer, opt)
